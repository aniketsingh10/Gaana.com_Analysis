# -*- coding: utf-8 -*-
"""Gaana_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RbdZSo8XpZvgfy2XptPQnQjH8JkcBgkw

### Data Analysis of Gaana.com
"""

# importing neccessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm #to find the time taken for a task to execute

# dowloading the dataset
!git clone https://github.com/AshishJangra27/Gaana-Data-Analysis

# dataframe
df = pd.read_csv('Gaana-Data-Analysis/songs.csv')

# header (1st five rows of dataset)
df.head()

"""### 1. Checking the NULL values



"""

# sum of the all null values
df.isnull().sum()

"""### 2. Data Preprocessing"""

# duration of first 10 songs
for duration in df['duration'][:10]:
  print (duration)

# minute and second spliting
for duration in df['duration'][:10]:
  print (duration.split(':'))

# typecasting the string values of time into string
for duration in df['duration'][:10]:

  print('Min',int(duration.split(':')[0]))
  print('Sec',int(duration.split(':')[1]))

# converting the whole time in form of seconds
for duration in df['duration'][:10]:

  m=int(duration.split(':')[0])
  s=int(duration.split(':')[1])
  sec=(m*60)+s

  print(m,s,sec)

# applying the change for whole dataset
duration1=[]
for duration in df['duration']:

  m=int(duration.split(':')[0])
  s=int(duration.split(':')[1])
  sec=(m*60)+s
  duration1.append(sec)

df['duration']=duration1
  #print(m,s,sec)

# checking if the duration values are in second or not
print(len(duration1))
print(len(df))
df.head()

"""### 3. Data Analysis

##### 3.1 Average duration of songs throughout dataset ?

---
"""

# average duration of songs i.e sum of total time / length of dataset
print("Average duration of songs :-",int(df['duration'].sum() / len(df)),"seconds")

"""##### 3.2   How many languages of songs are present in dataset ?"""

# set of all unique language song
print(set(df['language']))

# total count  of unique songs
len(set(df['language']))

"""##### 3.3 How many Hindi Songs are there ?"""

# traversing through whole language column and counting Hindi songs
count=0
for i in df['language']:
  if(i=="Hindi"):
    count+=1

print("Total count of Hindi songs is :-",count)

"""##### 3.4 Number of songs in each language ?"""

# for unique languages
for lang in df['language'].unique():
  count=0
  # count for each unique languages 
  for i in df['language']:
    if(i==lang):
      count+=1

  print(lang,":-",count)

"""##### 3.5 Average duration of songs in each language ?"""

# for unique languages
for lang in df['language'].unique():
  #printing the mean time in seconds
  print(lang,":-",int(df[df['language']==lang]['duration'].mean()))

"""#### 3.6 How many singers are there in the dataset ?"""

# list of all singers
all_singer =[]
for singers in df['singer']:
  # splitting the singers list if their are more than one singer
  all_singer+=singers.split('|')

# total number of unique singers
print("Total number of singers :-",len(set(all_singer)))

"""##### 3.7 Table with colunms of thier name and total songs sung ?"""

data = []

# forming the list of unique singers with their song count
unique_singers = list(set(all_singer))

for i in tqdm(unique_singers):

  count = 0
  for singers_ in df['singer']:
    if (i in singers_):
      count += 1

  data.append([i,count])

# froming a table/dataframe out of the data list
song_table =pd.DataFrame(data,columns=['singer','songs'])
song_table.head()

"""##### 3.8 Singer with most number of songs ?"""

song_table.sort_values(by='songs',ascending=False).head()

"""##### S. P. Balasubrahmanyam has the most number of songs

"""